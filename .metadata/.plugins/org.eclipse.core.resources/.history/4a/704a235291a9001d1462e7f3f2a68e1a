package main;

import java.awt.Graphics;
import java.util.LinkedList;

public class Handler {

	public LinkedList<GameObject> object = new LinkedList<GameObject>();
	private Game game;
	private Player player;
	private double renderDistance = Game.WIDTH * 1.2f;
	
	public int zombieCount = 0;
	public int zombiesKilled = 0;
	
	public Handler(Game game) {
		this.game = game;
	}
	
	public void tick() {
		
		if(player == null)
			lookForPlayer();
		
		for(int i = 0; i < object.size(); i++) {
			object.get(i).tick();
		}
		
		//printNumberOfPlayersInHandler();
	}
	
	public void printNumberOfPlayersInHandler() {
		System.out.println("Number of players: " + countPlayers());
	}
	
	
	public int countPlayers() {
		int count = 0;
		for(int i = object.size() - 1; i >= 0; i--) {
			if(object.get(i).getId() == ID.Player)
				count++;
		}
		return count;
	}

	public void clearHandlerExceptForOneNewPlayer() {
		object.clear();
		System.out.println(object.size());
		player = new Player(game.getPlayerOrigin(), game);
		addObject(player);
	}
	
	public void render(Graphics g) {
		
		for(int i = 0; i < object.size(); i++) {
			GameObject temp = object.get(i);
			if(Game.magnitude(temp.getX() - player.getX(), temp.getY() - player.getY()) < renderDistance)
				temp.render(g);
		}
	}
	
	public void addObject(GameObject obj) {
		if(object.size() == 0) object.add(obj);
		
		for(int i = 0; i < object.size(); i++) {
			if(object.get(i).priority < obj.priority) {
				object.add(i, obj);
				return;
			}
		}
		object.add(object.size() - 1, obj);
	}
	
	public void removeObject(GameObject obj) {
		if(obj == null) return;
		if(obj.getId() == ID.Zombie)zombiesKilled++; 
		object.remove(obj);
	}
	
	public void changePrioTemp(GameObject obj, int p) {
		for(int i = 0; i < object.size(); i++) {
			GameObject temp = object.get(i);
			if(temp == obj) {
				removeObject(temp);
				temp.priority = p;
				addObject(temp);
			}
		}
	}
	
	public void removeAllNonPlayerObjects() {
		removeAllZombies();
		for(int i = object.size() - 1; i >= 0; i--) {
			GameObject temp = object.get(i);
			if(temp.id != ID.Player)
				object.remove(i);
		}
	}
	
	public void removeAllZombies() {
		while(hasZombies()) 
			removeZombiesSinglePass();
	}
	
	public boolean hasZombies() {
		for(int i = 0; i < object.size(); i++) {
			GameObject temp = object.get(i);
			if(temp.id == ID.Zombie)
				return true;
		}
		return false;
	}
	
	public int countZombies() {
		int ans = 0;
		for(int i = 0; i < object.size(); i++) {
			GameObject temp = object.get(i);
			if(temp.id == ID.Zombie)
				ans++;
		}
		return ans;
	}
	
	public void removeZombiesSinglePass() {
		for(int i = object.size() - 1; i >= 0; i--) {
			if(object.get(i).getId() == ID.Zombie)
				object.remove(i);
		}
	}
	
	public Player getPlayer() {
		if(player == null)
			lookForPlayer();
		return player;
	}
	
	public void lookForPlayer() {
		for(int i = object.size() - 1; i >= 0; i--) {
			if(object.get(i).getId() == ID.Player) {
				player = (Player)object.get(i);
				return;
			}
		}
		player = null;
	}
	
	public void setPlayer(Player player) {
		this.player = player;
	}
	
	public void clear() {
		object.clear();
	}
	
	public void print() {
		for(int i = 0; i < object.size(); i++) {
			int temp = object.get(i).priority;
			System.out.println(temp + " ");
		}
	}
	
	public Game getGame() {
		return game;
	}
}
